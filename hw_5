1. Реализовать практические задания на примере других таблиц и запросов.

#использование LOCK TABLES

f:\web\server\ospanel>mysql -uroot -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 124
Server version: 8.0.12 MySQL Community Server - GPL
Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.
Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.
Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> show databases;

+--------------------+
| Database           |
+--------------------+
| bd                 |
| information_schema |
| mysql              |
| performance_schema |
| shop               |
| sys                |
+--------------------+
6 rows in set (0.03 sec)

mysql> use bd;

Database changed

mysql> show tables;

Current database: bd
+--------------+
| Tables_in_bd |
+--------------+
| cities       |
| city_info    |
| countries    |
| departments  |
| regions      |
| salary       |
| workers      |
+--------------+
7 rows in set (0.06 sec)

mysql> LOCK TABLE workers WRITE;

Query OK, 0 rows affected (0.02 sec)

mysql> SELECT `name`, `lastname` from workers;

Current database: bd
+-----------+------------+
| name      | lastname   |
+-----------+------------+
| Юрий      | Карась     |
| Анастасия | Белая      |
| Екатерина | Неустроева |
| Алина     | Таранина   |
| Анна      | Бахмет     |
| Анастасия | Малащицкая |
| Андрей    | Краснов    |
| Павел     | Якимов     |
+-----------+------------+
8 rows in set (0.04 sec)

#подключаемся к базе данных во втором окне и работаем в нем

mysql> SELECT `name`, `lastname` from workers;

+-----------+------------+
| name      | lastname   |
+-----------+------------+
| Юрий      | Карась     |
| Анастасия | Белая      |
| Екатерина | Неустроева |
| Алина     | Таранина   |
| Анна      | Бахмет     |
| Анастасия | Малащицкая |
| Андрей    | Краснов    |
| Павел     | Якимов     |
+-----------+------------+
8 rows in set (0.09 sec)

mysql>  INSERT INTO `workers` VALUE (7, 'Андрей', 'Леманов', 2, 40000, 'начальник');
#таблица зависла и ждет разбокировки
#разблокируем таблицу в первом окне
mysql> UNLOCK TABLES;
Query OK, 0 rows affected (0.00 sec)
#во втором окне выполнится запрос
Query OK, 1 row affected (21.34 sec)

#использование EXPLAIN

mysql> EXPLAIN SELECT `name`, `lastname` FROM `workers` WHERE `name` = 'Андрей';

+----+-------------+---------+------------+------+---------------+------+---------+------+
------+----------+-------------+
| id | select_type | table   | partitions | type | possible_keys | key  | key_len | ref  |
 rows | filtered | Extra       |
+----+-------------+---------+------------+------+---------------+------+---------+------+
------+----------+-------------+
|  1 | SIMPLE      | workers | NULL       | ALL  | NULL          | NULL | NULL    | NULL |
   10 |    10.00 | Using where |
+----+-------------+---------+------------+------+---------------+------+---------+------+
------+----------+-------------+
1 row in set, 1 warning (0.02 sec)


2. Подумать, какие операции являются транзакционными, и написать несколько примеров с транзакционными запросами.

#1. Создаем транзакцию, которая находит сотрудников с одинаковыми именами и выдает им бонус

BEGIN;
CREATE TABLE `same` 
SELECT `id` FROM `workers` WHERE `name` IN (
SELECT `name` FROM `workers` GROUP BY `name` HAVING count(*)>1);

ALTER TABLE `same` ADD `bonus` INT DEFAULT 1000;
ALTER TABLE `same` ADD `text` VARCHAR(100) DEFAULT 'За красивое имя';

SET foreign_key_checks = 0;
INSERT INTO `salary` (`worker_id`, `bonus`, `text`) SELECT `id`, `bonus`, `text` FROM `same`; 
SET foreign_key_checks = 1;
DROP TABLE `same` ;
COMMIT;


#2. Создаем транзакцию, которая находит сотрудников со зарплатой меньше средней и удваивает ее им

BEGIN;
SELECT @a := (SELECT AVG(`salary`) FROM `workers`);
UPDATE `workers` SET `salary` = `salary`*2 WHERE `salary`<@a;
COMMIT;

3. Проанализировать несколько запросов с помощью EXPLAIN.

mysql> EXPLAIN SELECT `workers`.`id`, `workers`.`name`, `workers`.`lastname` FROM `workers` 
INNER JOIN `salary` WHERE `workers`.`id`=`salary`.`worker_id`;

+----+-------------+---------+------------+------+---------------+-----------+---------+-----
----------+------+----------+-------------+
| id | select_type | table   | partitions | type | possible_keys | key       | key_len | ref
          | rows | filtered | Extra       |
+----+-------------+---------+------------+------+---------------+-----------+---------+-----
----------+------+----------+-------------+
|  1 | SIMPLE      | workers | NULL       | ALL  | PRIMARY       | NULL      | NULL    | NULL
          |    8 |   100.00 | NULL        |
|  1 | SIMPLE      | salary  | NULL       | ref  | worker_id     | worker_id | 4       | bd.w
orkers.id |    1 |   100.00 | Using index |
+----+-------------+---------+------------+------+---------------+-----------+---------+-----
----------+------+----------+-------------+
2 rows in set, 1 warning (1.12 sec)

mysql> EXPLAIN SELECT `id`, `name`, `lastname` FROM `workers`  WHERE `salary` > (SELECT AVG(`salary`) FROM `workers`);
+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------------+
| id | select_type | table   | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |
+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------------+
|  1 | PRIMARY     | workers | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    8 |    33.33 | Using where |
|  2 | SUBQUERY    | workers | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    8 |   100.00 | NULL        |
+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------------+
2 rows in set, 1 warning (0.00 sec)
