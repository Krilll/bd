Задача 1. 
У вас есть социальная сеть, где пользователи (id, имя) могут ставить друг другу лайки. 
Создайте необходимые таблицы для хранения данной информации. 
Создайте запрос, который выведет информацию:
  id пользователя;
  имя;
  лайков получено;
  лайков поставлено.
  Взаимные лайки.

#создаем бд
CREATE DATABASE `Social_network`;

CREATE TABLE IF NOT EXISTS `users` (
`id` INT NOT NULL  AUTO_INCREMENT,
`login` VARCHAR(25) NOT NULL,
PRIMARY KEY (`id`));

INSERT INTO `users` (`login`) 
VALUES ('Анеш'), ('Алина'), ('Игорь'), ('Юрий'), ('Валерий'), 
('Евгений'), ('Марк'), ('Анастасия'), ('Андрей'), ('Наталья');

CREATE TABLE IF NOT EXISTS `users_likes` (
`id` INT NOT NULL AUTO_INCREMENT,
`who` INT NOT NULL,
`whom` INT NOT NULL,
PRIMARY KEY (`id`));

ALTER TABLE `users_likes`
ADD FOREIGN KEY (`who`) 
REFERENCES `users`(`id`) 
ON UPDATE CASCADE
ON DELETE RESTRICT,
ADD FOREIGN KEY (`whom`) 
REFERENCES `users`(`id`) 
ON UPDATE CASCADE
ON DELETE RESTRICT;

INSERT INTO `users_likes` (`who`, `whom`) 
VALUES (1,2), (2,3), (4,8), (7,10), (10,7),
(9,10), (10,8), (1,5), (3,2), (1,4);

#запросы

#id пользователя; имя; лайков получено; лайков поставлено.

USE `users_likes`;

SELECT `users`.`id`, `users`.`login` AS 'имя', 
(SUM(`users_likes`.`who` = `users`.`id`)) AS 'лайков получено',
(SUM(`users_likes`.`whom` = `users`.`id`)) AS 'лайков поставлено'
FROM `users` INNER JOIN `users_likes`
GROUP BY  `users`.`id`;





#Взаимные лайки.
  
  
  
Задача 2. 
Для структуры из задачи 1 выведите список всех пользователей, 
которые поставили лайк пользователям A и B (id задайте произвольно), 
но при этом не поставили лайк пользователю C.

Задача 3. 
Добавим сущности «Фотография» и «Комментарии к фотографии». 
Нужно создать функционал для пользователей, который позволяет ставить 
лайки не только пользователям, но и фото или комментариям к фото. 
Учитывайте следующие ограничения:
  пользователь не может дважды лайкнуть одну и ту же сущность;
  пользователь имеет право отозвать лайк;
  необходимо иметь возможность считать число полученных сущностью лайков 
  и выводить список пользователей, поставивших лайки;
  в будущем могут появиться новые виды сущностей, которые можно лайкать.
