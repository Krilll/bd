Задача 1. 
У вас есть социальная сеть, где пользователи (id, имя) могут ставить друг другу лайки. 
Создайте необходимые таблицы для хранения данной информации. 
Создайте запрос, который выведет информацию:
  id пользователя;
  имя;
  лайков получено;
  лайков поставлено.
  Взаимные лайки.

#создаем бд
CREATE DATABASE `Social_network`;

CREATE TABLE IF NOT EXISTS `users` (
`id` INT NOT NULL  AUTO_INCREMENT,
`login` VARCHAR(25) NOT NULL,
PRIMARY KEY (`id`));

INSERT INTO `users` (`login`) 
VALUES ('Анеш'), ('Алина'), ('Игорь'), ('Юрий'), ('Валерий'), 
('Евгений'), ('Марк'), ('Анастасия'), ('Андрей'), ('Наталья');

CREATE TABLE IF NOT EXISTS `users_likes` (зр
`id` INT NOT NULL AUTO_INCREMENT,
`user1_id` INT NOT NULL,
`user2_id` INT NOT NULL,
`like_1_to_2` INT(1) NOT NULL DEFAULT '1', 
`like_2_to_1` INT(1) NOT NULL DEFAULT '0',
PRIMARY KEY (`id`));

ALTER TABLE `users_likes`
ADD FOREIGN KEY (`user1_id`) 
REFERENCES `users`(`id`) 
ON UPDATE CASCADE
ON DELETE RESTRICT,
ADD FOREIGN KEY (`user2_id`) 
REFERENCES `users`(`id`) 
ON UPDATE CASCADE
ON DELETE RESTRICT;

INSERT INTO `users_likes` (`user1_id`, `user2_id`) 
VALUES (1,2), (2,3), (4,8), (7,10), 
(9,10), (10,8), (1,5), (3,2), (1,4);

INSERT INTO `users_likes` (`user1_id`, `user2_id`, `like_2_to_1`) 
VALUES (3,4,1), (8,6,1), (7,2,1);

#запросы

#id пользователя; имя; лайков получено; лайков поставлено.

mysql> USE Social_network;

Database changed

mysql> SELECT `users`.`id`, `users`.`login` AS 'имя', 
SUM( 
  (`users_likes`.`user1_id` = `users`.`id` 
    AND 
    `users_likes`.`like_1_to_2` = 1) 
  OR 
  (`users_likes`.`user2_id` = `users`.`id` 
    AND 
    `users_likes`.`like_2_to_1` = 1) 
) AS 'лайков поставлено',
SUM( 
  (`users_likes`.`user2_id` = `users`.`id` 
    AND 
    `users_likes`.`like_1_to_2` = 1) 
  OR 
  (`users_likes`.`user1_id` = `users`.`id` 
    AND 
    `users_likes`.`like_2_to_1` = 1) 
) AS 'лайков получено' 
FROM `users` INNER JOIN `users_likes` 
GROUP BY `users`.`id`; 

+----+-----------+-------------------+-----------------+
| id | имя       | лайков поставлено | лайков получено |
+----+-----------+-------------------+-----------------+
|  1 | Анеш      |                 3 |               0 |
|  2 | Алина     |                 2 |               2 |
|  3 | Игорь     |                 1 |               2 |
|  4 | Юрий      |                 2 |               2 |
|  5 | Валерий   |                 0 |               1 |
|  6 | Евгений   |                 1 |               1 |
|  7 | Марк      |                 2 |               1 |
|  8 | Анастасия |                 1 |               3 |
|  9 | Андрей    |                 1 |               0 |
| 10 | Наталья   |                 1 |               2 |
+----+-----------+-------------------+-----------------+
10 rows in set (0.00 sec)

#Если по умолчанию первым записывать пользователя,
поставившего лайк, а, если ему поставят ответный лайк,
уже существующую запись в бд обновлять, можно сократить предыдущий SELECT

mysql> SELECT `users`.`id`, `users`.`login` AS 'имя', 
SUM( 
  (`users_likes`.`user1_id` = `users`.`id`) 
  OR
  (`users_likes`.`user2_id` = `users`.`id`
  AND 
  `like_2_to_1` = 1)
) AS 'лайков поставлено',
SUM( 
  (`users_likes`.`user2_id` = `users`.`id`) 
  OR
  (`users_likes`.`user1_id` = `users`.`id`
  AND 
  `like_2_to_1` = 1)
) AS 'лайков получено'
FROM `users` INNER JOIN `users_likes` 
GROUP BY `users`.`id`;

+----+-----------+-------------------+-----------------+
| id | имя       | лайков поставлено | лайков получено |
+----+-----------+-------------------+-----------------+
|  1 | Анеш      |                 3 |               0 |
|  2 | Алина     |                 2 |               2 |
|  3 | Игорь     |                 1 |               2 |
|  4 | Юрий      |                 2 |               2 |
|  5 | Валерий   |                 0 |               1 |
|  6 | Евгений   |                 1 |               1 |
|  7 | Марк      |                 2 |               1 |
|  8 | Анастасия |                 1 |               3 |
|  9 | Андрей    |                 1 |               0 |
| 10 | Наталья   |                 1 |               2 |
+----+-----------+-------------------+-----------------+
10 rows in set (0.00 sec)


#Взаимные лайки.

mysql> SELECT `users_likes`.`id`, `user1_id`, `user2_id`
FROM `users_likes`
WHERE `like_2_to_1` = 1
AND `like_1_to_2` = 1;

+----+----------+----------+
| id | user1_id | user2_id |
+----+----------+----------+
| 11 |        3 |        4 |
| 12 |        8 |        6 |
| 13 |        7 |        5 |
+----+----------+----------+
3 rows in set (0.00 sec)

mysql> SELECT `users_likes`.`id` AS 'id Взаимного лайка', 
`users`.`login` AS 'Пользователь'
FROM `users` INNER JOIN `users_likes`
WHERE `like_2_to_1` = 1
AND `like_1_to_2` = 1
AND (`users`.`id` = `user1_id`
OR `users`.`id` = `user2_id`);

+--------------------+--------------+
| id Взаимного лайка | Пользователь |
+--------------------+--------------+
|                 11 | Игорь        |
|                 11 | Юрий         |
|                 12 | Евгений      |
|                 12 | Анастасия    |
|                 13 | Валерий      |
|                 13 | Марк         |
+--------------------+--------------+
6 rows in set (0.00 sec)



Задача 2. 
Для структуры из задачи 1 выведите список всех пользователей, 
которые поставили лайк пользователям A и B (id задайте произвольно), 
но при этом не поставили лайк пользователю C.

#id пользователя A = 2, id пользователя B = 5, id пользователя C = 4, 

INSERT INTO `users_likes` (`id_user1`, `id_user2`) 
VALUES (4,5), (4,2), (3,5);


#1,- 7,
4

mysql> SELECT `users`.`id`, `users`.`login` AS 'имя'
FROM `users` INNER JOIN `users_likes` 
WHERE( 
  (`users`.`id` = `id_user1`
    AND `users_likes`.`id_user2` IN (2, 5)
    AND `users_likes`.`like_1_to_2` = 1)
  OR
  (`users`.`id` = `id_user2`
    AND `users_likes`.`id_user1` IN (2, 5) 
    AND `users_likes`.`like_2_to_1` = 1)
)    
;

AND (SUM(`users`.`id` = `id_user2`) = 2
OR SUM(`users`.`id` = `id_user2`) = 2
OR SUM(`users`.`id` = `id_user2`) + SUM(`users`.`id` = `id_user2`) = 2);





AND
((`users`.`id` = `id_user1`
AND `users_likes`.`id_user2` = 5 
AND `users_likes`.`like_1_to_2` = 1)
OR
(`users`.`id` = `id_user2`
AND `users_likes`.`id_user1` = 5 
AND `users_likes`.`like_2_to_1` = 1))

AND
((`users_likes`.`id_user2` = 5 AND `users_likes`.`like_2_to_1` = 1)
OR (`users_likes`.`id_user1` = 5 AND `users_likes`.`like_1_to_2` = 1))
AND
((`users_likes`.`id_user2` = 4 AND `users_likes`.`like_2_to_1` = 0)
OR (`users_likes`.`id_user1` = 4 AND `users_likes`.`like_1_to_2` = 0)); 


#1,- 7,
4 => 
===
SELECT `users`.`id`, `users`.`login` AS 'имя', 
CASE 
WHEN (`users_likes`.`id_user2` = 2 AND
`users`.`id` = `id_user1`
AND `users_likes`.`like_1_to_2` = 1)
THEN 'yes' 
END AS 'answer' 
FROM `users` INNER JOIN `users_likes`
WHERE SUBSTRING('answer',0,3) = 'yes';


WHERE( 
  (`users`.`id` = `id_user1`
    AND `users_likes`.`id_user2` IN (2, 5)
    AND `users_likes`.`like_1_to_2` = 1)
  OR
  (`users`.`id` = `id_user2`
    AND `users_likes`.`id_user1` IN (2, 5) 
    AND `users_likes`.`like_2_to_1` = 1)
==


Задача 3. 
Добавим сущности «Фотография» и «Комментарии к фотографии». 
Нужно создать функционал для пользователей, который позволяет ставить 
лайки не только пользователям, но и фото или комментариям к фото. 
Учитывайте следующие ограничения:
  пользователь не может дважды лайкнуть одну и ту же сущность;
  пользователь имеет право отозвать лайк;
  необходимо иметь возможность считать число полученных сущностью лайков 
  и выводить список пользователей, поставивших лайки;
  в будущем могут появиться новые виды сущностей, которые можно лайкать.

# + сущность "Фотография"

CREATE TABLE IF NOT EXISTS `photos` (
`id` INT NOT NULL  AUTO_INCREMENT,
`name` VARCHAR(25) NOT NULL,
`owner_id` INT NOT NULL,
PRIMARY KEY (`id`),
FOREIGN KEY (`owner_id`) 
REFERENCES `users`(`id`) 
ON UPDATE CASCADE
ON DELETE RESTRICT);


# + сущность "Комментарии к фотографии"

CREATE TABLE IF NOT EXISTS `photos_comments` (
`id` INT NOT NULL  AUTO_INCREMENT,
`photo_id` INT NOT NULL,
`user_id` INT NOT NULL,
`text` VARCHAR(25) NOT NULL,
PRIMARY KEY (`id`),
FOREIGN KEY (`photo_id`) 
REFERENCES `photos`(`id`) 
ON UPDATE CASCADE
ON DELETE RESTRICT,
FOREIGN KEY (`user_id`) 
REFERENCES `users`(`id`) 
ON UPDATE CASCADE
ON DELETE RESTRICT);

#+сущность лайки к фото

CREATE TABLE IF NOT EXISTS `photo_likes` (
`id` INT NOT NULL AUTO_INCREMENT,
`photo_id` INT NOT NULL,
`user_id` INT NOT NULL,
PRIMARY KEY (`id`),
FOREIGN KEY (`photo_id`) 
REFERENCES `photos`(`id`) 
ON UPDATE CASCADE
ON DELETE RESTRICT,
FOREIGN KEY (`user_id`) 
REFERENCES `users`(`id`) 
ON UPDATE CASCADE
ON DELETE RESTRICT);

#+сущность лайки к комментариям к фото

CREATE TABLE IF NOT EXISTS `photos_comments_likes` (
`id` INT NOT NULL AUTO_INCREMENT,
`comments_id` INT NOT NULL,
`user_id` INT NOT NULL,
PRIMARY KEY (`id`),
FOREIGN KEY (`comments_id`) 
REFERENCES `photos_comments`(`id`) 
ON UPDATE CASCADE
ON DELETE RESTRICT,
FOREIGN KEY (`user_id`) 
REFERENCES `users`(`id`) 
ON UPDATE CASCADE
ON DELETE RESTRICT);

#пользователь не может дважды лайкнуть одну и ту же сущность => + триггер
#photos, phptos_comments, uerss?

CREATE TRIGGER `photos`.`one_like`
BEFORE DELETE ON `trigger_carts` FOR EACH ROW
BEGIN
DELETE FROM trigger_cart_items WHERE OLD.cart_id = cart_id;
END



+Добавим сущности «Фотография» и «Комментарии к фотографии». 
+Нужно создать функционал для пользователей, который позволяет ставить 
+лайки не только пользователям, но и фото или комментариям к фото. 
Учитывайте следующие ограничения:
  - пользователь не может дважды лайкнуть одну и ту же сущность;
  пользователь имеет право отозвать лайк;
  необходимо иметь возможность считать число полученных сущностью лайков 
  и выводить список пользователей, поставивших лайки;
  +в будущем могут появиться новые виды сущностей, которые можно лайкать.







